// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/nicholas-fedor/shoutrrr/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// newMockrouter creates a new instance of mockrouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockrouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockrouter {
	mock := &mockrouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockrouter is an autogenerated mock type for the router type
type mockrouter struct {
	mock.Mock
}

type mockrouter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockrouter) EXPECT() *mockrouter_Expecter {
	return &mockrouter_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type mockrouter
func (_mock *mockrouter) Send(message string, params *types.Params) []error {
	ret := _mock.Called(message, params)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 []error
	if returnFunc, ok := ret.Get(0).(func(string, *types.Params) []error); ok {
		r0 = returnFunc(message, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}
	return r0
}

// mockrouter_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type mockrouter_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - message string
//   - params *types.Params
func (_e *mockrouter_Expecter) Send(message interface{}, params interface{}) *mockrouter_Send_Call {
	return &mockrouter_Send_Call{Call: _e.mock.On("Send", message, params)}
}

func (_c *mockrouter_Send_Call) Run(run func(message string, params *types.Params)) *mockrouter_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *types.Params
		if args[1] != nil {
			arg1 = args[1].(*types.Params)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockrouter_Send_Call) Return(errs []error) *mockrouter_Send_Call {
	_c.Call.Return(errs)
	return _c
}

func (_c *mockrouter_Send_Call) RunAndReturn(run func(message string, params *types.Params) []error) *mockrouter_Send_Call {
	_c.Call.Return(run)
	return _c
}

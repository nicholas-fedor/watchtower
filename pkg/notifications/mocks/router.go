// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/nicholas-fedor/shoutrrr/pkg/types"
)

// Mockrouter is an autogenerated mock type for the router type
type Mockrouter struct {
	mock.Mock
}

type Mockrouter_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockrouter) EXPECT() *Mockrouter_Expecter {
	return &Mockrouter_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: message, params
func (_m *Mockrouter) Send(message string, params *types.Params) []error {
	ret := _m.Called(message, params)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 []error
	if rf, ok := ret.Get(0).(func(string, *types.Params) []error); ok {
		r0 = rf(message, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// Mockrouter_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Mockrouter_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - message string
//   - params *types.Params
func (_e *Mockrouter_Expecter) Send(message interface{}, params interface{}) *Mockrouter_Send_Call {
	return &Mockrouter_Send_Call{Call: _e.mock.On("Send", message, params)}
}

func (_c *Mockrouter_Send_Call) Run(run func(message string, params *types.Params)) *Mockrouter_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*types.Params))
	})
	return _c
}

func (_c *Mockrouter_Send_Call) Return(_a0 []error) *Mockrouter_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockrouter_Send_Call) RunAndReturn(run func(string, *types.Params) []error) *Mockrouter_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockrouter creates a new instance of Mockrouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockrouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockrouter {
	mock := &Mockrouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

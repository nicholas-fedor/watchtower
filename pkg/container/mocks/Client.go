// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/nicholas-fedor/watchtower/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// BuildImageFromGit provides a mock function for the type MockClient
func (_mock *MockClient) BuildImageFromGit(ctx context.Context, repoURL string, commitHash string, imageName string, auth map[string]string, dockerfilePath string) (types.ImageID, error) {
	ret := _mock.Called(ctx, repoURL, commitHash, imageName, auth, dockerfilePath)

	if len(ret) == 0 {
		panic("no return value specified for BuildImageFromGit")
	}

	var r0 types.ImageID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, map[string]string, string) (types.ImageID, error)); ok {
		return returnFunc(ctx, repoURL, commitHash, imageName, auth, dockerfilePath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, map[string]string, string) types.ImageID); ok {
		r0 = returnFunc(ctx, repoURL, commitHash, imageName, auth, dockerfilePath)
	} else {
		r0 = ret.Get(0).(types.ImageID)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, map[string]string, string) error); ok {
		r1 = returnFunc(ctx, repoURL, commitHash, imageName, auth, dockerfilePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_BuildImageFromGit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildImageFromGit'
type MockClient_BuildImageFromGit_Call struct {
	*mock.Call
}

// BuildImageFromGit is a helper method to define mock.On call
//   - ctx context.Context
//   - repoURL string
//   - commitHash string
//   - imageName string
//   - auth map[string]string
//   - dockerfilePath string
func (_e *MockClient_Expecter) BuildImageFromGit(ctx interface{}, repoURL interface{}, commitHash interface{}, imageName interface{}, auth interface{}, dockerfilePath interface{}) *MockClient_BuildImageFromGit_Call {
	return &MockClient_BuildImageFromGit_Call{Call: _e.mock.On("BuildImageFromGit", ctx, repoURL, commitHash, imageName, auth, dockerfilePath)}
}

func (_c *MockClient_BuildImageFromGit_Call) Run(run func(ctx context.Context, repoURL string, commitHash string, imageName string, auth map[string]string, dockerfilePath string)) *MockClient_BuildImageFromGit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 map[string]string
		if args[4] != nil {
			arg4 = args[4].(map[string]string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockClient_BuildImageFromGit_Call) Return(imageID types.ImageID, err error) *MockClient_BuildImageFromGit_Call {
	_c.Call.Return(imageID, err)
	return _c
}

func (_c *MockClient_BuildImageFromGit_Call) RunAndReturn(run func(ctx context.Context, repoURL string, commitHash string, imageName string, auth map[string]string, dockerfilePath string) (types.ImageID, error)) *MockClient_BuildImageFromGit_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteCommand provides a mock function for the type MockClient
func (_mock *MockClient) ExecuteCommand(container types.Container, command string, timeout int, uid int, gid int) (bool, error) {
	ret := _mock.Called(container, command, timeout, uid, gid)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteCommand")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(types.Container, string, int, int, int) (bool, error)); ok {
		return returnFunc(container, command, timeout, uid, gid)
	}
	if returnFunc, ok := ret.Get(0).(func(types.Container, string, int, int, int) bool); ok {
		r0 = returnFunc(container, command, timeout, uid, gid)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(types.Container, string, int, int, int) error); ok {
		r1 = returnFunc(container, command, timeout, uid, gid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ExecuteCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteCommand'
type MockClient_ExecuteCommand_Call struct {
	*mock.Call
}

// ExecuteCommand is a helper method to define mock.On call
//   - container types.Container
//   - command string
//   - timeout int
//   - uid int
//   - gid int
func (_e *MockClient_Expecter) ExecuteCommand(container interface{}, command interface{}, timeout interface{}, uid interface{}, gid interface{}) *MockClient_ExecuteCommand_Call {
	return &MockClient_ExecuteCommand_Call{Call: _e.mock.On("ExecuteCommand", container, command, timeout, uid, gid)}
}

func (_c *MockClient_ExecuteCommand_Call) Run(run func(container types.Container, command string, timeout int, uid int, gid int)) *MockClient_ExecuteCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.Container
		if args[0] != nil {
			arg0 = args[0].(types.Container)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockClient_ExecuteCommand_Call) Return(b bool, err error) *MockClient_ExecuteCommand_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockClient_ExecuteCommand_Call) RunAndReturn(run func(container types.Container, command string, timeout int, uid int, gid int) (bool, error)) *MockClient_ExecuteCommand_Call {
	_c.Call.Return(run)
	return _c
}

// GetContainer provides a mock function for the type MockClient
func (_mock *MockClient) GetContainer(containerID types.ContainerID) (types.Container, error) {
	ret := _mock.Called(containerID)

	if len(ret) == 0 {
		panic("no return value specified for GetContainer")
	}

	var r0 types.Container
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(types.ContainerID) (types.Container, error)); ok {
		return returnFunc(containerID)
	}
	if returnFunc, ok := ret.Get(0).(func(types.ContainerID) types.Container); ok {
		r0 = returnFunc(containerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Container)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(types.ContainerID) error); ok {
		r1 = returnFunc(containerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContainer'
type MockClient_GetContainer_Call struct {
	*mock.Call
}

// GetContainer is a helper method to define mock.On call
//   - containerID types.ContainerID
func (_e *MockClient_Expecter) GetContainer(containerID interface{}) *MockClient_GetContainer_Call {
	return &MockClient_GetContainer_Call{Call: _e.mock.On("GetContainer", containerID)}
}

func (_c *MockClient_GetContainer_Call) Run(run func(containerID types.ContainerID)) *MockClient_GetContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.ContainerID
		if args[0] != nil {
			arg0 = args[0].(types.ContainerID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetContainer_Call) Return(container types.Container, err error) *MockClient_GetContainer_Call {
	_c.Call.Return(container, err)
	return _c
}

func (_c *MockClient_GetContainer_Call) RunAndReturn(run func(containerID types.ContainerID) (types.Container, error)) *MockClient_GetContainer_Call {
	_c.Call.Return(run)
	return _c
}

// GetInfo provides a mock function for the type MockClient
func (_mock *MockClient) GetInfo() (map[string]any, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInfo")
	}

	var r0 map[string]any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (map[string]any, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() map[string]any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInfo'
type MockClient_GetInfo_Call struct {
	*mock.Call
}

// GetInfo is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetInfo() *MockClient_GetInfo_Call {
	return &MockClient_GetInfo_Call{Call: _e.mock.On("GetInfo")}
}

func (_c *MockClient_GetInfo_Call) Run(run func()) *MockClient_GetInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetInfo_Call) Return(stringToV map[string]any, err error) *MockClient_GetInfo_Call {
	_c.Call.Return(stringToV, err)
	return _c
}

func (_c *MockClient_GetInfo_Call) RunAndReturn(run func() (map[string]any, error)) *MockClient_GetInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function for the type MockClient
func (_mock *MockClient) GetVersion() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockClient_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type MockClient_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetVersion() *MockClient_GetVersion_Call {
	return &MockClient_GetVersion_Call{Call: _e.mock.On("GetVersion")}
}

func (_c *MockClient_GetVersion_Call) Run(run func()) *MockClient_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetVersion_Call) Return(s string) *MockClient_GetVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockClient_GetVersion_Call) RunAndReturn(run func() string) *MockClient_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// IsContainerStale provides a mock function for the type MockClient
func (_mock *MockClient) IsContainerStale(container types.Container, params types.UpdateParams) (bool, types.ImageID, error) {
	ret := _mock.Called(container, params)

	if len(ret) == 0 {
		panic("no return value specified for IsContainerStale")
	}

	var r0 bool
	var r1 types.ImageID
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(types.Container, types.UpdateParams) (bool, types.ImageID, error)); ok {
		return returnFunc(container, params)
	}
	if returnFunc, ok := ret.Get(0).(func(types.Container, types.UpdateParams) bool); ok {
		r0 = returnFunc(container, params)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(types.Container, types.UpdateParams) types.ImageID); ok {
		r1 = returnFunc(container, params)
	} else {
		r1 = ret.Get(1).(types.ImageID)
	}
	if returnFunc, ok := ret.Get(2).(func(types.Container, types.UpdateParams) error); ok {
		r2 = returnFunc(container, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockClient_IsContainerStale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsContainerStale'
type MockClient_IsContainerStale_Call struct {
	*mock.Call
}

// IsContainerStale is a helper method to define mock.On call
//   - container types.Container
//   - params types.UpdateParams
func (_e *MockClient_Expecter) IsContainerStale(container interface{}, params interface{}) *MockClient_IsContainerStale_Call {
	return &MockClient_IsContainerStale_Call{Call: _e.mock.On("IsContainerStale", container, params)}
}

func (_c *MockClient_IsContainerStale_Call) Run(run func(container types.Container, params types.UpdateParams)) *MockClient_IsContainerStale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.Container
		if args[0] != nil {
			arg0 = args[0].(types.Container)
		}
		var arg1 types.UpdateParams
		if args[1] != nil {
			arg1 = args[1].(types.UpdateParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_IsContainerStale_Call) Return(b bool, imageID types.ImageID, err error) *MockClient_IsContainerStale_Call {
	_c.Call.Return(b, imageID, err)
	return _c
}

func (_c *MockClient_IsContainerStale_Call) RunAndReturn(run func(container types.Container, params types.UpdateParams) (bool, types.ImageID, error)) *MockClient_IsContainerStale_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllContainers provides a mock function for the type MockClient
func (_mock *MockClient) ListAllContainers() ([]types.Container, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListAllContainers")
	}

	var r0 []types.Container
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]types.Container, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []types.Container); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Container)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListAllContainers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllContainers'
type MockClient_ListAllContainers_Call struct {
	*mock.Call
}

// ListAllContainers is a helper method to define mock.On call
func (_e *MockClient_Expecter) ListAllContainers() *MockClient_ListAllContainers_Call {
	return &MockClient_ListAllContainers_Call{Call: _e.mock.On("ListAllContainers")}
}

func (_c *MockClient_ListAllContainers_Call) Run(run func()) *MockClient_ListAllContainers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_ListAllContainers_Call) Return(containers []types.Container, err error) *MockClient_ListAllContainers_Call {
	_c.Call.Return(containers, err)
	return _c
}

func (_c *MockClient_ListAllContainers_Call) RunAndReturn(run func() ([]types.Container, error)) *MockClient_ListAllContainers_Call {
	_c.Call.Return(run)
	return _c
}

// ListContainers provides a mock function for the type MockClient
func (_mock *MockClient) ListContainers(filter types.Filter) ([]types.Container, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListContainers")
	}

	var r0 []types.Container
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(types.Filter) ([]types.Container, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(types.Filter) []types.Container); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Container)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(types.Filter) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListContainers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContainers'
type MockClient_ListContainers_Call struct {
	*mock.Call
}

// ListContainers is a helper method to define mock.On call
//   - filter types.Filter
func (_e *MockClient_Expecter) ListContainers(filter interface{}) *MockClient_ListContainers_Call {
	return &MockClient_ListContainers_Call{Call: _e.mock.On("ListContainers", filter)}
}

func (_c *MockClient_ListContainers_Call) Run(run func(filter types.Filter)) *MockClient_ListContainers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.Filter
		if args[0] != nil {
			arg0 = args[0].(types.Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_ListContainers_Call) Return(containers []types.Container, err error) *MockClient_ListContainers_Call {
	_c.Call.Return(containers, err)
	return _c
}

func (_c *MockClient_ListContainers_Call) RunAndReturn(run func(filter types.Filter) ([]types.Container, error)) *MockClient_ListContainers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveImageByID provides a mock function for the type MockClient
func (_mock *MockClient) RemoveImageByID(imageID types.ImageID) error {
	ret := _mock.Called(imageID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveImageByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.ImageID) error); ok {
		r0 = returnFunc(imageID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_RemoveImageByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveImageByID'
type MockClient_RemoveImageByID_Call struct {
	*mock.Call
}

// RemoveImageByID is a helper method to define mock.On call
//   - imageID types.ImageID
func (_e *MockClient_Expecter) RemoveImageByID(imageID interface{}) *MockClient_RemoveImageByID_Call {
	return &MockClient_RemoveImageByID_Call{Call: _e.mock.On("RemoveImageByID", imageID)}
}

func (_c *MockClient_RemoveImageByID_Call) Run(run func(imageID types.ImageID)) *MockClient_RemoveImageByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.ImageID
		if args[0] != nil {
			arg0 = args[0].(types.ImageID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_RemoveImageByID_Call) Return(err error) *MockClient_RemoveImageByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_RemoveImageByID_Call) RunAndReturn(run func(imageID types.ImageID) error) *MockClient_RemoveImageByID_Call {
	_c.Call.Return(run)
	return _c
}

// RenameContainer provides a mock function for the type MockClient
func (_mock *MockClient) RemoveContainer(container types.Container) error {
	ret := _mock.Called(container)

	if len(ret) == 0 {
		panic("no return value specified for RemoveContainer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.Container) error); ok {
		r0 = returnFunc(container)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_RemoveContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveContainer'
type MockClient_RemoveContainer_Call struct {
	*mock.Call
}

// RemoveContainer is a helper method to define mock.On call
//   - container types.Container
func (_e *MockClient_Expecter) RemoveContainer(container interface{}) *MockClient_RemoveContainer_Call {
	return &MockClient_RemoveContainer_Call{Call: _e.mock.On("RemoveContainer", container)}
}

func (_c *MockClient_RemoveContainer_Call) Run(run func(container types.Container)) *MockClient_RemoveContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.Container
		if args[0] != nil {
			arg0 = args[0].(types.Container)
		}
		run(arg0)
	})
	return _c
}

func (_c *MockClient_RemoveContainer_Call) Return(err error) *MockClient_RemoveContainer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_RemoveContainer_Call) RunAndReturn(run func(container types.Container) error) *MockClient_RemoveContainer_Call {
	_c.Call.Return(run)
	return _c
}

func (_mock *MockClient) RenameContainer(container types.Container, newName string) error {
	ret := _mock.Called(container, newName)

	if len(ret) == 0 {
		panic("no return value specified for RenameContainer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.Container, string) error); ok {
		r0 = returnFunc(container, newName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_RenameContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameContainer'
type MockClient_RenameContainer_Call struct {
	*mock.Call
}

// RenameContainer is a helper method to define mock.On call
//   - container types.Container
//   - newName string
func (_e *MockClient_Expecter) RenameContainer(container interface{}, newName interface{}) *MockClient_RenameContainer_Call {
	return &MockClient_RenameContainer_Call{Call: _e.mock.On("RenameContainer", container, newName)}
}

func (_c *MockClient_RenameContainer_Call) Run(run func(container types.Container, newName string)) *MockClient_RenameContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.Container
		if args[0] != nil {
			arg0 = args[0].(types.Container)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_RenameContainer_Call) Return(err error) *MockClient_RenameContainer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_RenameContainer_Call) RunAndReturn(run func(container types.Container, newName string) error) *MockClient_RenameContainer_Call {
	_c.Call.Return(run)
	return _c
}

// StartContainer provides a mock function for the type MockClient
func (_mock *MockClient) StartExistingContainer(containerID types.ContainerID) error {
	ret := _mock.Called(containerID)

	if len(ret) == 0 {
		panic("no return value specified for StartExistingContainer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.ContainerID) error); ok {
		r0 = returnFunc(containerID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_StartExistingContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartExistingContainer'
type MockClient_StartExistingContainer_Call struct {
	*mock.Call
}

// StartExistingContainer is a helper method to define mock.On call
//   - containerID types.ContainerID
func (_e *MockClient_Expecter) StartExistingContainer(containerID interface{}) *MockClient_StartExistingContainer_Call {
	return &MockClient_StartExistingContainer_Call{Call: _e.mock.On("StartExistingContainer", containerID)}
}

func (_c *MockClient_StartExistingContainer_Call) Run(run func(containerID types.ContainerID)) *MockClient_StartExistingContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.ContainerID
		if args[0] != nil {
			arg0 = args[0].(types.ContainerID)
		}
		run(arg0)
	})
	return _c
}

func (_c *MockClient_StartExistingContainer_Call) Return(err error) *MockClient_StartExistingContainer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_StartExistingContainer_Call) RunAndReturn(run func(containerID types.ContainerID) error) *MockClient_StartExistingContainer_Call {
	_c.Call.Return(run)
	return _c
}

func (_mock *MockClient) StartContainer(container types.Container) (types.ContainerID, error) {
	ret := _mock.Called(container)

	if len(ret) == 0 {
		panic("no return value specified for StartContainer")
	}

	var r0 types.ContainerID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(types.Container) (types.ContainerID, error)); ok {
		return returnFunc(container)
	}
	if returnFunc, ok := ret.Get(0).(func(types.Container) types.ContainerID); ok {
		r0 = returnFunc(container)
	} else {
		r0 = ret.Get(0).(types.ContainerID)
	}
	if returnFunc, ok := ret.Get(1).(func(types.Container) error); ok {
		r1 = returnFunc(container)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_StartContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartContainer'
type MockClient_StartContainer_Call struct {
	*mock.Call
}

// StartContainer is a helper method to define mock.On call
//   - container types.Container
func (_e *MockClient_Expecter) StartContainer(container interface{}) *MockClient_StartContainer_Call {
	return &MockClient_StartContainer_Call{Call: _e.mock.On("StartContainer", container)}
}

func (_c *MockClient_StartContainer_Call) Run(run func(container types.Container)) *MockClient_StartContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.Container
		if args[0] != nil {
			arg0 = args[0].(types.Container)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_StartContainer_Call) Return(containerID types.ContainerID, err error) *MockClient_StartContainer_Call {
	_c.Call.Return(containerID, err)
	return _c
}

func (_c *MockClient_StartContainer_Call) RunAndReturn(run func(container types.Container) (types.ContainerID, error)) *MockClient_StartContainer_Call {
	_c.Call.Return(run)
	return _c
}

// StopContainerOnly provides a mock function for the type MockClient
func (_mock *MockClient) StopContainerOnly(container types.Container, timeout time.Duration) error {
	ret := _mock.Called(container, timeout)

	if len(ret) == 0 {
		panic("no return value specified for StopContainerOnly")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.Container, time.Duration) error); ok {
		r0 = returnFunc(container, timeout)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_StopContainerOnly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopContainerOnly'
type MockClient_StopContainerOnly_Call struct {
	*mock.Call
}

// StopContainerOnly is a helper method to define mock.On call
//   - container types.Container
//   - timeout time.Duration
func (_e *MockClient_Expecter) StopContainerOnly(container interface{}, timeout interface{}) *MockClient_StopContainerOnly_Call {
	return &MockClient_StopContainerOnly_Call{Call: _e.mock.On("StopContainerOnly", container, timeout)}
}

func (_c *MockClient_StopContainerOnly_Call) Run(run func(container types.Container, timeout time.Duration)) *MockClient_StopContainerOnly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.Container
		if args[0] != nil {
			arg0 = args[0].(types.Container)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_StopContainerOnly_Call) Return(err error) *MockClient_StopContainerOnly_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_StopContainerOnly_Call) RunAndReturn(run func(container types.Container, timeout time.Duration) error) *MockClient_StopContainerOnly_Call {
	_c.Call.Return(run)
	return _c
}

// StopContainer provides a mock function for the type MockClient
func (_mock *MockClient) StopContainer(container types.Container, timeout time.Duration) error {
	ret := _mock.Called(container, timeout)

	if len(ret) == 0 {
		panic("no return value specified for StopContainer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.Container, time.Duration) error); ok {
		r0 = returnFunc(container, timeout)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_StopContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopContainer'
type MockClient_StopContainer_Call struct {
	*mock.Call
}

// StopContainer is a helper method to define mock.On call
//   - container types.Container
//   - timeout time.Duration
func (_e *MockClient_Expecter) StopContainer(container interface{}, timeout interface{}) *MockClient_StopContainer_Call {
	return &MockClient_StopContainer_Call{Call: _e.mock.On("StopContainer", container, timeout)}
}

func (_c *MockClient_StopContainer_Call) Run(run func(container types.Container, timeout time.Duration)) *MockClient_StopContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.Container
		if args[0] != nil {
			arg0 = args[0].(types.Container)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_StopContainer_Call) Return(err error) *MockClient_StopContainer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_StopContainer_Call) RunAndReturn(run func(container types.Container, timeout time.Duration) error) *MockClient_StopContainer_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForContainerHealthy provides a mock function for the type MockClient
func (_mock *MockClient) WaitForContainerHealthy(containerID types.ContainerID, timeout time.Duration) error {
	ret := _mock.Called(containerID, timeout)

	if len(ret) == 0 {
		panic("no return value specified for WaitForContainerHealthy")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.ContainerID, time.Duration) error); ok {
		r0 = returnFunc(containerID, timeout)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_WaitForContainerHealthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForContainerHealthy'
type MockClient_WaitForContainerHealthy_Call struct {
	*mock.Call
}

// WaitForContainerHealthy is a helper method to define mock.On call
//   - containerID types.ContainerID
//   - timeout time.Duration
func (_e *MockClient_Expecter) WaitForContainerHealthy(containerID interface{}, timeout interface{}) *MockClient_WaitForContainerHealthy_Call {
	return &MockClient_WaitForContainerHealthy_Call{Call: _e.mock.On("WaitForContainerHealthy", containerID, timeout)}
}

func (_c *MockClient_WaitForContainerHealthy_Call) Run(run func(containerID types.ContainerID, timeout time.Duration)) *MockClient_WaitForContainerHealthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.ContainerID
		if args[0] != nil {
			arg0 = args[0].(types.ContainerID)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_WaitForContainerHealthy_Call) Return(err error) *MockClient_WaitForContainerHealthy_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_WaitForContainerHealthy_Call) RunAndReturn(run func(containerID types.ContainerID, timeout time.Duration) error) *MockClient_WaitForContainerHealthy_Call {
	_c.Call.Return(run)
	return _c
}

// WarnOnHeadPullFailed provides a mock function for the type MockClient
func (_mock *MockClient) WarnOnHeadPullFailed(container types.Container) bool {
	ret := _mock.Called(container)

	if len(ret) == 0 {
		panic("no return value specified for WarnOnHeadPullFailed")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(types.Container) bool); ok {
		r0 = returnFunc(container)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockClient_WarnOnHeadPullFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WarnOnHeadPullFailed'
type MockClient_WarnOnHeadPullFailed_Call struct {
	*mock.Call
}

// WarnOnHeadPullFailed is a helper method to define mock.On call
//   - container types.Container
func (_e *MockClient_Expecter) WarnOnHeadPullFailed(container interface{}) *MockClient_WarnOnHeadPullFailed_Call {
	return &MockClient_WarnOnHeadPullFailed_Call{Call: _e.mock.On("WarnOnHeadPullFailed", container)}
}

func (_c *MockClient_WarnOnHeadPullFailed_Call) Run(run func(container types.Container)) *MockClient_WarnOnHeadPullFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.Container
		if args[0] != nil {
			arg0 = args[0].(types.Container)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_WarnOnHeadPullFailed_Call) Return(b bool) *MockClient_WarnOnHeadPullFailed_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockClient_WarnOnHeadPullFailed_Call) RunAndReturn(run func(container types.Container) bool) *MockClient_WarnOnHeadPullFailed_Call {
	_c.Call.Return(run)
	return _c
}

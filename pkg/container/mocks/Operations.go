// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/api/types/network"
	"github.com/opencontainers/image-spec/specs-go/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOperations creates a new instance of MockOperations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOperations(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOperations {
	mock := &MockOperations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOperations is an autogenerated mock type for the Operations type
type MockOperations struct {
	mock.Mock
}

type MockOperations_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOperations) EXPECT() *MockOperations_Expecter {
	return &MockOperations_Expecter{mock: &_m.Mock}
}

// ContainerCreate provides a mock function for the type MockOperations
func (_mock *MockOperations) ContainerCreate(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string) (container.CreateResponse, error) {
	ret := _mock.Called(ctx, config, hostConfig, networkingConfig, platform, containerName)

	if len(ret) == 0 {
		panic("no return value specified for ContainerCreate")
	}

	var r0 container.CreateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) (container.CreateResponse, error)); ok {
		return returnFunc(ctx, config, hostConfig, networkingConfig, platform, containerName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) container.CreateResponse); ok {
		r0 = returnFunc(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r0 = ret.Get(0).(container.CreateResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) error); ok {
		r1 = returnFunc(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOperations_ContainerCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerCreate'
type MockOperations_ContainerCreate_Call struct {
	*mock.Call
}

// ContainerCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - config *container.Config
//   - hostConfig *container.HostConfig
//   - networkingConfig *network.NetworkingConfig
//   - platform *v1.Platform
//   - containerName string
func (_e *MockOperations_Expecter) ContainerCreate(ctx interface{}, config interface{}, hostConfig interface{}, networkingConfig interface{}, platform interface{}, containerName interface{}) *MockOperations_ContainerCreate_Call {
	return &MockOperations_ContainerCreate_Call{Call: _e.mock.On("ContainerCreate", ctx, config, hostConfig, networkingConfig, platform, containerName)}
}

func (_c *MockOperations_ContainerCreate_Call) Run(run func(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string)) *MockOperations_ContainerCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *container.Config
		if args[1] != nil {
			arg1 = args[1].(*container.Config)
		}
		var arg2 *container.HostConfig
		if args[2] != nil {
			arg2 = args[2].(*container.HostConfig)
		}
		var arg3 *network.NetworkingConfig
		if args[3] != nil {
			arg3 = args[3].(*network.NetworkingConfig)
		}
		var arg4 *v1.Platform
		if args[4] != nil {
			arg4 = args[4].(*v1.Platform)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockOperations_ContainerCreate_Call) Return(createResponse container.CreateResponse, err error) *MockOperations_ContainerCreate_Call {
	_c.Call.Return(createResponse, err)
	return _c
}

func (_c *MockOperations_ContainerCreate_Call) RunAndReturn(run func(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string) (container.CreateResponse, error)) *MockOperations_ContainerCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerRemove provides a mock function for the type MockOperations
func (_mock *MockOperations) ContainerRemove(ctx context.Context, containerID string, options container.RemoveOptions) error {
	ret := _mock.Called(ctx, containerID, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerRemove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.RemoveOptions) error); ok {
		r0 = returnFunc(ctx, containerID, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOperations_ContainerRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerRemove'
type MockOperations_ContainerRemove_Call struct {
	*mock.Call
}

// ContainerRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
//   - options container.RemoveOptions
func (_e *MockOperations_Expecter) ContainerRemove(ctx interface{}, containerID interface{}, options interface{}) *MockOperations_ContainerRemove_Call {
	return &MockOperations_ContainerRemove_Call{Call: _e.mock.On("ContainerRemove", ctx, containerID, options)}
}

func (_c *MockOperations_ContainerRemove_Call) Run(run func(ctx context.Context, containerID string, options container.RemoveOptions)) *MockOperations_ContainerRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.RemoveOptions
		if args[2] != nil {
			arg2 = args[2].(container.RemoveOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOperations_ContainerRemove_Call) Return(err error) *MockOperations_ContainerRemove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOperations_ContainerRemove_Call) RunAndReturn(run func(ctx context.Context, containerID string, options container.RemoveOptions) error) *MockOperations_ContainerRemove_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerRename provides a mock function for the type MockOperations
func (_mock *MockOperations) ContainerRename(ctx context.Context, containerID string, newContainerName string) error {
	ret := _mock.Called(ctx, containerID, newContainerName)

	if len(ret) == 0 {
		panic("no return value specified for ContainerRename")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, containerID, newContainerName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOperations_ContainerRename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerRename'
type MockOperations_ContainerRename_Call struct {
	*mock.Call
}

// ContainerRename is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
//   - newContainerName string
func (_e *MockOperations_Expecter) ContainerRename(ctx interface{}, containerID interface{}, newContainerName interface{}) *MockOperations_ContainerRename_Call {
	return &MockOperations_ContainerRename_Call{Call: _e.mock.On("ContainerRename", ctx, containerID, newContainerName)}
}

func (_c *MockOperations_ContainerRename_Call) Run(run func(ctx context.Context, containerID string, newContainerName string)) *MockOperations_ContainerRename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOperations_ContainerRename_Call) Return(err error) *MockOperations_ContainerRename_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOperations_ContainerRename_Call) RunAndReturn(run func(ctx context.Context, containerID string, newContainerName string) error) *MockOperations_ContainerRename_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStart provides a mock function for the type MockOperations
func (_mock *MockOperations) ContainerStart(ctx context.Context, containerID string, options container.StartOptions) error {
	ret := _mock.Called(ctx, containerID, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, container.StartOptions) error); ok {
		r0 = returnFunc(ctx, containerID, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOperations_ContainerStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStart'
type MockOperations_ContainerStart_Call struct {
	*mock.Call
}

// ContainerStart is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
//   - options container.StartOptions
func (_e *MockOperations_Expecter) ContainerStart(ctx interface{}, containerID interface{}, options interface{}) *MockOperations_ContainerStart_Call {
	return &MockOperations_ContainerStart_Call{Call: _e.mock.On("ContainerStart", ctx, containerID, options)}
}

func (_c *MockOperations_ContainerStart_Call) Run(run func(ctx context.Context, containerID string, options container.StartOptions)) *MockOperations_ContainerStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 container.StartOptions
		if args[2] != nil {
			arg2 = args[2].(container.StartOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOperations_ContainerStart_Call) Return(err error) *MockOperations_ContainerStart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOperations_ContainerStart_Call) RunAndReturn(run func(ctx context.Context, containerID string, options container.StartOptions) error) *MockOperations_ContainerStart_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkConnect provides a mock function for the type MockOperations
func (_mock *MockOperations) NetworkConnect(ctx context.Context, networkID string, containerID string, config *network.EndpointSettings) error {
	ret := _mock.Called(ctx, networkID, containerID, config)

	if len(ret) == 0 {
		panic("no return value specified for NetworkConnect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *network.EndpointSettings) error); ok {
		r0 = returnFunc(ctx, networkID, containerID, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOperations_NetworkConnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkConnect'
type MockOperations_NetworkConnect_Call struct {
	*mock.Call
}

// NetworkConnect is a helper method to define mock.On call
//   - ctx context.Context
//   - networkID string
//   - containerID string
//   - config *network.EndpointSettings
func (_e *MockOperations_Expecter) NetworkConnect(ctx interface{}, networkID interface{}, containerID interface{}, config interface{}) *MockOperations_NetworkConnect_Call {
	return &MockOperations_NetworkConnect_Call{Call: _e.mock.On("NetworkConnect", ctx, networkID, containerID, config)}
}

func (_c *MockOperations_NetworkConnect_Call) Run(run func(ctx context.Context, networkID string, containerID string, config *network.EndpointSettings)) *MockOperations_NetworkConnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *network.EndpointSettings
		if args[3] != nil {
			arg3 = args[3].(*network.EndpointSettings)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockOperations_NetworkConnect_Call) Return(err error) *MockOperations_NetworkConnect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOperations_NetworkConnect_Call) RunAndReturn(run func(ctx context.Context, networkID string, containerID string, config *network.EndpointSettings) error) *MockOperations_NetworkConnect_Call {
	_c.Call.Return(run)
	return _c
}

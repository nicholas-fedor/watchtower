// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/nicholas-fedor/watchtower/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// GetLatestCommit provides a mock function for the type MockProvider
func (_mock *MockProvider) GetLatestCommit(ctx context.Context, repoURL string, ref string, auth types.AuthConfig) (string, error) {
	ret := _mock.Called(ctx, repoURL, ref, auth)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestCommit")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, types.AuthConfig) (string, error)); ok {
		return returnFunc(ctx, repoURL, ref, auth)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, types.AuthConfig) string); ok {
		r0 = returnFunc(ctx, repoURL, ref, auth)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, types.AuthConfig) error); ok {
		r1 = returnFunc(ctx, repoURL, ref, auth)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvider_GetLatestCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestCommit'
type MockProvider_GetLatestCommit_Call struct {
	*mock.Call
}

// GetLatestCommit is a helper method to define mock.On call
//   - ctx context.Context
//   - repoURL string
//   - ref string
//   - auth types.AuthConfig
func (_e *MockProvider_Expecter) GetLatestCommit(ctx interface{}, repoURL interface{}, ref interface{}, auth interface{}) *MockProvider_GetLatestCommit_Call {
	return &MockProvider_GetLatestCommit_Call{Call: _e.mock.On("GetLatestCommit", ctx, repoURL, ref, auth)}
}

func (_c *MockProvider_GetLatestCommit_Call) Run(run func(ctx context.Context, repoURL string, ref string, auth types.AuthConfig)) *MockProvider_GetLatestCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 types.AuthConfig
		if args[3] != nil {
			arg3 = args[3].(types.AuthConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockProvider_GetLatestCommit_Call) Return(s string, err error) *MockProvider_GetLatestCommit_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockProvider_GetLatestCommit_Call) RunAndReturn(run func(ctx context.Context, repoURL string, ref string, auth types.AuthConfig) (string, error)) *MockProvider_GetLatestCommit_Call {
	_c.Call.Return(run)
	return _c
}

// Hosts provides a mock function for the type MockProvider
func (_mock *MockProvider) Hosts() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hosts")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockProvider_Hosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hosts'
type MockProvider_Hosts_Call struct {
	*mock.Call
}

// Hosts is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Hosts() *MockProvider_Hosts_Call {
	return &MockProvider_Hosts_Call{Call: _e.mock.On("Hosts")}
}

func (_c *MockProvider_Hosts_Call) Run(run func()) *MockProvider_Hosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Hosts_Call) Return(strings []string) *MockProvider_Hosts_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockProvider_Hosts_Call) RunAndReturn(run func() []string) *MockProvider_Hosts_Call {
	_c.Call.Return(run)
	return _c
}

// IsSupported provides a mock function for the type MockProvider
func (_mock *MockProvider) IsSupported(repoURL string) bool {
	ret := _mock.Called(repoURL)

	if len(ret) == 0 {
		panic("no return value specified for IsSupported")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(repoURL)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockProvider_IsSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSupported'
type MockProvider_IsSupported_Call struct {
	*mock.Call
}

// IsSupported is a helper method to define mock.On call
//   - repoURL string
func (_e *MockProvider_Expecter) IsSupported(repoURL interface{}) *MockProvider_IsSupported_Call {
	return &MockProvider_IsSupported_Call{Call: _e.mock.On("IsSupported", repoURL)}
}

func (_c *MockProvider_IsSupported_Call) Run(run func(repoURL string)) *MockProvider_IsSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProvider_IsSupported_Call) Return(b bool) *MockProvider_IsSupported_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockProvider_IsSupported_Call) RunAndReturn(run func(repoURL string) bool) *MockProvider_IsSupported_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockProvider
func (_mock *MockProvider) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockProvider_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockProvider_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Name() *MockProvider_Name_Call {
	return &MockProvider_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockProvider_Name_Call) Run(run func()) *MockProvider_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Name_Call) Return(s string) *MockProvider_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockProvider_Name_Call) RunAndReturn(run func() string) *MockProvider_Name_Call {
	_c.Call.Return(run)
	return _c
}

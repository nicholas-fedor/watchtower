// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	container "github.com/docker/docker/api/types/container"
	image "github.com/docker/docker/api/types/image"

	mock "github.com/stretchr/testify/mock"

	types "github.com/nicholas-fedor/watchtower/pkg/types"
)

// MockContainer is an autogenerated mock type for the Container type
type MockContainer struct {
	mock.Mock
}

type MockContainer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContainer) EXPECT() *MockContainer_Expecter {
	return &MockContainer_Expecter{mock: &_m.Mock}
}

// ContainerInfo provides a mock function with no fields
func (_m *MockContainer) ContainerInfo() *container.InspectResponse {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ContainerInfo")
	}

	var r0 *container.InspectResponse
	if rf, ok := ret.Get(0).(func() *container.InspectResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.InspectResponse)
		}
	}

	return r0
}

// MockContainer_ContainerInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerInfo'
type MockContainer_ContainerInfo_Call struct {
	*mock.Call
}

// ContainerInfo is a helper method to define mock.On call
func (_e *MockContainer_Expecter) ContainerInfo() *MockContainer_ContainerInfo_Call {
	return &MockContainer_ContainerInfo_Call{Call: _e.mock.On("ContainerInfo")}
}

func (_c *MockContainer_ContainerInfo_Call) Run(run func()) *MockContainer_ContainerInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_ContainerInfo_Call) Return(_a0 *container.InspectResponse) *MockContainer_ContainerInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_ContainerInfo_Call) RunAndReturn(run func() *container.InspectResponse) *MockContainer_ContainerInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Enabled provides a mock function with no fields
func (_m *MockContainer) Enabled() (bool, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	var r1 bool
	if rf, ok := ret.Get(0).(func() (bool, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockContainer_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type MockContainer_Enabled_Call struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
func (_e *MockContainer_Expecter) Enabled() *MockContainer_Enabled_Call {
	return &MockContainer_Enabled_Call{Call: _e.mock.On("Enabled")}
}

func (_c *MockContainer_Enabled_Call) Run(run func()) *MockContainer_Enabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_Enabled_Call) Return(_a0 bool, _a1 bool) *MockContainer_Enabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContainer_Enabled_Call) RunAndReturn(run func() (bool, bool)) *MockContainer_Enabled_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreateConfig provides a mock function with no fields
func (_m *MockContainer) GetCreateConfig() *container.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCreateConfig")
	}

	var r0 *container.Config
	if rf, ok := ret.Get(0).(func() *container.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Config)
		}
	}

	return r0
}

// MockContainer_GetCreateConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreateConfig'
type MockContainer_GetCreateConfig_Call struct {
	*mock.Call
}

// GetCreateConfig is a helper method to define mock.On call
func (_e *MockContainer_Expecter) GetCreateConfig() *MockContainer_GetCreateConfig_Call {
	return &MockContainer_GetCreateConfig_Call{Call: _e.mock.On("GetCreateConfig")}
}

func (_c *MockContainer_GetCreateConfig_Call) Run(run func()) *MockContainer_GetCreateConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_GetCreateConfig_Call) Return(_a0 *container.Config) *MockContainer_GetCreateConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_GetCreateConfig_Call) RunAndReturn(run func() *container.Config) *MockContainer_GetCreateConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreateHostConfig provides a mock function with no fields
func (_m *MockContainer) GetCreateHostConfig() *container.HostConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCreateHostConfig")
	}

	var r0 *container.HostConfig
	if rf, ok := ret.Get(0).(func() *container.HostConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.HostConfig)
		}
	}

	return r0
}

// MockContainer_GetCreateHostConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreateHostConfig'
type MockContainer_GetCreateHostConfig_Call struct {
	*mock.Call
}

// GetCreateHostConfig is a helper method to define mock.On call
func (_e *MockContainer_Expecter) GetCreateHostConfig() *MockContainer_GetCreateHostConfig_Call {
	return &MockContainer_GetCreateHostConfig_Call{Call: _e.mock.On("GetCreateHostConfig")}
}

func (_c *MockContainer_GetCreateHostConfig_Call) Run(run func()) *MockContainer_GetCreateHostConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_GetCreateHostConfig_Call) Return(_a0 *container.HostConfig) *MockContainer_GetCreateHostConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_GetCreateHostConfig_Call) RunAndReturn(run func() *container.HostConfig) *MockContainer_GetCreateHostConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetLifecyclePostCheckCommand provides a mock function with no fields
func (_m *MockContainer) GetLifecyclePostCheckCommand() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLifecyclePostCheckCommand")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContainer_GetLifecyclePostCheckCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLifecyclePostCheckCommand'
type MockContainer_GetLifecyclePostCheckCommand_Call struct {
	*mock.Call
}

// GetLifecyclePostCheckCommand is a helper method to define mock.On call
func (_e *MockContainer_Expecter) GetLifecyclePostCheckCommand() *MockContainer_GetLifecyclePostCheckCommand_Call {
	return &MockContainer_GetLifecyclePostCheckCommand_Call{Call: _e.mock.On("GetLifecyclePostCheckCommand")}
}

func (_c *MockContainer_GetLifecyclePostCheckCommand_Call) Run(run func()) *MockContainer_GetLifecyclePostCheckCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_GetLifecyclePostCheckCommand_Call) Return(_a0 string) *MockContainer_GetLifecyclePostCheckCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_GetLifecyclePostCheckCommand_Call) RunAndReturn(run func() string) *MockContainer_GetLifecyclePostCheckCommand_Call {
	_c.Call.Return(run)
	return _c
}

// GetLifecyclePostUpdateCommand provides a mock function with no fields
func (_m *MockContainer) GetLifecyclePostUpdateCommand() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLifecyclePostUpdateCommand")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContainer_GetLifecyclePostUpdateCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLifecyclePostUpdateCommand'
type MockContainer_GetLifecyclePostUpdateCommand_Call struct {
	*mock.Call
}

// GetLifecyclePostUpdateCommand is a helper method to define mock.On call
func (_e *MockContainer_Expecter) GetLifecyclePostUpdateCommand() *MockContainer_GetLifecyclePostUpdateCommand_Call {
	return &MockContainer_GetLifecyclePostUpdateCommand_Call{Call: _e.mock.On("GetLifecyclePostUpdateCommand")}
}

func (_c *MockContainer_GetLifecyclePostUpdateCommand_Call) Run(run func()) *MockContainer_GetLifecyclePostUpdateCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_GetLifecyclePostUpdateCommand_Call) Return(_a0 string) *MockContainer_GetLifecyclePostUpdateCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_GetLifecyclePostUpdateCommand_Call) RunAndReturn(run func() string) *MockContainer_GetLifecyclePostUpdateCommand_Call {
	_c.Call.Return(run)
	return _c
}

// GetLifecyclePreCheckCommand provides a mock function with no fields
func (_m *MockContainer) GetLifecyclePreCheckCommand() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLifecyclePreCheckCommand")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContainer_GetLifecyclePreCheckCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLifecyclePreCheckCommand'
type MockContainer_GetLifecyclePreCheckCommand_Call struct {
	*mock.Call
}

// GetLifecyclePreCheckCommand is a helper method to define mock.On call
func (_e *MockContainer_Expecter) GetLifecyclePreCheckCommand() *MockContainer_GetLifecyclePreCheckCommand_Call {
	return &MockContainer_GetLifecyclePreCheckCommand_Call{Call: _e.mock.On("GetLifecyclePreCheckCommand")}
}

func (_c *MockContainer_GetLifecyclePreCheckCommand_Call) Run(run func()) *MockContainer_GetLifecyclePreCheckCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_GetLifecyclePreCheckCommand_Call) Return(_a0 string) *MockContainer_GetLifecyclePreCheckCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_GetLifecyclePreCheckCommand_Call) RunAndReturn(run func() string) *MockContainer_GetLifecyclePreCheckCommand_Call {
	_c.Call.Return(run)
	return _c
}

// GetLifecyclePreUpdateCommand provides a mock function with no fields
func (_m *MockContainer) GetLifecyclePreUpdateCommand() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLifecyclePreUpdateCommand")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContainer_GetLifecyclePreUpdateCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLifecyclePreUpdateCommand'
type MockContainer_GetLifecyclePreUpdateCommand_Call struct {
	*mock.Call
}

// GetLifecyclePreUpdateCommand is a helper method to define mock.On call
func (_e *MockContainer_Expecter) GetLifecyclePreUpdateCommand() *MockContainer_GetLifecyclePreUpdateCommand_Call {
	return &MockContainer_GetLifecyclePreUpdateCommand_Call{Call: _e.mock.On("GetLifecyclePreUpdateCommand")}
}

func (_c *MockContainer_GetLifecyclePreUpdateCommand_Call) Run(run func()) *MockContainer_GetLifecyclePreUpdateCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_GetLifecyclePreUpdateCommand_Call) Return(_a0 string) *MockContainer_GetLifecyclePreUpdateCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_GetLifecyclePreUpdateCommand_Call) RunAndReturn(run func() string) *MockContainer_GetLifecyclePreUpdateCommand_Call {
	_c.Call.Return(run)
	return _c
}

// HasImageInfo provides a mock function with no fields
func (_m *MockContainer) HasImageInfo() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasImageInfo")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContainer_HasImageInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasImageInfo'
type MockContainer_HasImageInfo_Call struct {
	*mock.Call
}

// HasImageInfo is a helper method to define mock.On call
func (_e *MockContainer_Expecter) HasImageInfo() *MockContainer_HasImageInfo_Call {
	return &MockContainer_HasImageInfo_Call{Call: _e.mock.On("HasImageInfo")}
}

func (_c *MockContainer_HasImageInfo_Call) Run(run func()) *MockContainer_HasImageInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_HasImageInfo_Call) Return(_a0 bool) *MockContainer_HasImageInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_HasImageInfo_Call) RunAndReturn(run func() bool) *MockContainer_HasImageInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockContainer) ID() types.ContainerID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 types.ContainerID
	if rf, ok := ret.Get(0).(func() types.ContainerID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.ContainerID)
	}

	return r0
}

// MockContainer_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockContainer_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockContainer_Expecter) ID() *MockContainer_ID_Call {
	return &MockContainer_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockContainer_ID_Call) Run(run func()) *MockContainer_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_ID_Call) Return(_a0 types.ContainerID) *MockContainer_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_ID_Call) RunAndReturn(run func() types.ContainerID) *MockContainer_ID_Call {
	_c.Call.Return(run)
	return _c
}

// ImageID provides a mock function with no fields
func (_m *MockContainer) ImageID() types.ImageID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ImageID")
	}

	var r0 types.ImageID
	if rf, ok := ret.Get(0).(func() types.ImageID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.ImageID)
	}

	return r0
}

// MockContainer_ImageID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageID'
type MockContainer_ImageID_Call struct {
	*mock.Call
}

// ImageID is a helper method to define mock.On call
func (_e *MockContainer_Expecter) ImageID() *MockContainer_ImageID_Call {
	return &MockContainer_ImageID_Call{Call: _e.mock.On("ImageID")}
}

func (_c *MockContainer_ImageID_Call) Run(run func()) *MockContainer_ImageID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_ImageID_Call) Return(_a0 types.ImageID) *MockContainer_ImageID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_ImageID_Call) RunAndReturn(run func() types.ImageID) *MockContainer_ImageID_Call {
	_c.Call.Return(run)
	return _c
}

// ImageInfo provides a mock function with no fields
func (_m *MockContainer) ImageInfo() *image.InspectResponse {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ImageInfo")
	}

	var r0 *image.InspectResponse
	if rf, ok := ret.Get(0).(func() *image.InspectResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*image.InspectResponse)
		}
	}

	return r0
}

// MockContainer_ImageInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageInfo'
type MockContainer_ImageInfo_Call struct {
	*mock.Call
}

// ImageInfo is a helper method to define mock.On call
func (_e *MockContainer_Expecter) ImageInfo() *MockContainer_ImageInfo_Call {
	return &MockContainer_ImageInfo_Call{Call: _e.mock.On("ImageInfo")}
}

func (_c *MockContainer_ImageInfo_Call) Run(run func()) *MockContainer_ImageInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_ImageInfo_Call) Return(_a0 *image.InspectResponse) *MockContainer_ImageInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_ImageInfo_Call) RunAndReturn(run func() *image.InspectResponse) *MockContainer_ImageInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ImageName provides a mock function with no fields
func (_m *MockContainer) ImageName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ImageName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContainer_ImageName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageName'
type MockContainer_ImageName_Call struct {
	*mock.Call
}

// ImageName is a helper method to define mock.On call
func (_e *MockContainer_Expecter) ImageName() *MockContainer_ImageName_Call {
	return &MockContainer_ImageName_Call{Call: _e.mock.On("ImageName")}
}

func (_c *MockContainer_ImageName_Call) Run(run func()) *MockContainer_ImageName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_ImageName_Call) Return(_a0 string) *MockContainer_ImageName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_ImageName_Call) RunAndReturn(run func() string) *MockContainer_ImageName_Call {
	_c.Call.Return(run)
	return _c
}

// IsLinkedToRestarting provides a mock function with no fields
func (_m *MockContainer) IsLinkedToRestarting() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsLinkedToRestarting")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContainer_IsLinkedToRestarting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLinkedToRestarting'
type MockContainer_IsLinkedToRestarting_Call struct {
	*mock.Call
}

// IsLinkedToRestarting is a helper method to define mock.On call
func (_e *MockContainer_Expecter) IsLinkedToRestarting() *MockContainer_IsLinkedToRestarting_Call {
	return &MockContainer_IsLinkedToRestarting_Call{Call: _e.mock.On("IsLinkedToRestarting")}
}

func (_c *MockContainer_IsLinkedToRestarting_Call) Run(run func()) *MockContainer_IsLinkedToRestarting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_IsLinkedToRestarting_Call) Return(_a0 bool) *MockContainer_IsLinkedToRestarting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_IsLinkedToRestarting_Call) RunAndReturn(run func() bool) *MockContainer_IsLinkedToRestarting_Call {
	_c.Call.Return(run)
	return _c
}

// IsMonitorOnly provides a mock function with given fields: params
func (_m *MockContainer) IsMonitorOnly(params types.UpdateParams) bool {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for IsMonitorOnly")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.UpdateParams) bool); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContainer_IsMonitorOnly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMonitorOnly'
type MockContainer_IsMonitorOnly_Call struct {
	*mock.Call
}

// IsMonitorOnly is a helper method to define mock.On call
//   - params types.UpdateParams
func (_e *MockContainer_Expecter) IsMonitorOnly(params interface{}) *MockContainer_IsMonitorOnly_Call {
	return &MockContainer_IsMonitorOnly_Call{Call: _e.mock.On("IsMonitorOnly", params)}
}

func (_c *MockContainer_IsMonitorOnly_Call) Run(run func(params types.UpdateParams)) *MockContainer_IsMonitorOnly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.UpdateParams))
	})
	return _c
}

func (_c *MockContainer_IsMonitorOnly_Call) Return(_a0 bool) *MockContainer_IsMonitorOnly_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_IsMonitorOnly_Call) RunAndReturn(run func(types.UpdateParams) bool) *MockContainer_IsMonitorOnly_Call {
	_c.Call.Return(run)
	return _c
}

// IsNoPull provides a mock function with given fields: params
func (_m *MockContainer) IsNoPull(params types.UpdateParams) bool {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for IsNoPull")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.UpdateParams) bool); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContainer_IsNoPull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNoPull'
type MockContainer_IsNoPull_Call struct {
	*mock.Call
}

// IsNoPull is a helper method to define mock.On call
//   - params types.UpdateParams
func (_e *MockContainer_Expecter) IsNoPull(params interface{}) *MockContainer_IsNoPull_Call {
	return &MockContainer_IsNoPull_Call{Call: _e.mock.On("IsNoPull", params)}
}

func (_c *MockContainer_IsNoPull_Call) Run(run func(params types.UpdateParams)) *MockContainer_IsNoPull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.UpdateParams))
	})
	return _c
}

func (_c *MockContainer_IsNoPull_Call) Return(_a0 bool) *MockContainer_IsNoPull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_IsNoPull_Call) RunAndReturn(run func(types.UpdateParams) bool) *MockContainer_IsNoPull_Call {
	_c.Call.Return(run)
	return _c
}

// IsRestarting provides a mock function with no fields
func (_m *MockContainer) IsRestarting() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRestarting")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContainer_IsRestarting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRestarting'
type MockContainer_IsRestarting_Call struct {
	*mock.Call
}

// IsRestarting is a helper method to define mock.On call
func (_e *MockContainer_Expecter) IsRestarting() *MockContainer_IsRestarting_Call {
	return &MockContainer_IsRestarting_Call{Call: _e.mock.On("IsRestarting")}
}

func (_c *MockContainer_IsRestarting_Call) Run(run func()) *MockContainer_IsRestarting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_IsRestarting_Call) Return(_a0 bool) *MockContainer_IsRestarting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_IsRestarting_Call) RunAndReturn(run func() bool) *MockContainer_IsRestarting_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function with no fields
func (_m *MockContainer) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContainer_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockContainer_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockContainer_Expecter) IsRunning() *MockContainer_IsRunning_Call {
	return &MockContainer_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockContainer_IsRunning_Call) Run(run func()) *MockContainer_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_IsRunning_Call) Return(_a0 bool) *MockContainer_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_IsRunning_Call) RunAndReturn(run func() bool) *MockContainer_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// IsStale provides a mock function with no fields
func (_m *MockContainer) IsStale() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsStale")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContainer_IsStale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsStale'
type MockContainer_IsStale_Call struct {
	*mock.Call
}

// IsStale is a helper method to define mock.On call
func (_e *MockContainer_Expecter) IsStale() *MockContainer_IsStale_Call {
	return &MockContainer_IsStale_Call{Call: _e.mock.On("IsStale")}
}

func (_c *MockContainer_IsStale_Call) Run(run func()) *MockContainer_IsStale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_IsStale_Call) Return(_a0 bool) *MockContainer_IsStale_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_IsStale_Call) RunAndReturn(run func() bool) *MockContainer_IsStale_Call {
	_c.Call.Return(run)
	return _c
}

// IsWatchtower provides a mock function with no fields
func (_m *MockContainer) IsWatchtower() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsWatchtower")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContainer_IsWatchtower_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWatchtower'
type MockContainer_IsWatchtower_Call struct {
	*mock.Call
}

// IsWatchtower is a helper method to define mock.On call
func (_e *MockContainer_Expecter) IsWatchtower() *MockContainer_IsWatchtower_Call {
	return &MockContainer_IsWatchtower_Call{Call: _e.mock.On("IsWatchtower")}
}

func (_c *MockContainer_IsWatchtower_Call) Run(run func()) *MockContainer_IsWatchtower_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_IsWatchtower_Call) Return(_a0 bool) *MockContainer_IsWatchtower_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_IsWatchtower_Call) RunAndReturn(run func() bool) *MockContainer_IsWatchtower_Call {
	_c.Call.Return(run)
	return _c
}

// Links provides a mock function with no fields
func (_m *MockContainer) Links() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Links")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockContainer_Links_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Links'
type MockContainer_Links_Call struct {
	*mock.Call
}

// Links is a helper method to define mock.On call
func (_e *MockContainer_Expecter) Links() *MockContainer_Links_Call {
	return &MockContainer_Links_Call{Call: _e.mock.On("Links")}
}

func (_c *MockContainer_Links_Call) Run(run func()) *MockContainer_Links_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_Links_Call) Return(_a0 []string) *MockContainer_Links_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_Links_Call) RunAndReturn(run func() []string) *MockContainer_Links_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockContainer) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContainer_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockContainer_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockContainer_Expecter) Name() *MockContainer_Name_Call {
	return &MockContainer_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockContainer_Name_Call) Run(run func()) *MockContainer_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_Name_Call) Return(_a0 string) *MockContainer_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_Name_Call) RunAndReturn(run func() string) *MockContainer_Name_Call {
	_c.Call.Return(run)
	return _c
}

// PostUpdateTimeout provides a mock function with no fields
func (_m *MockContainer) PostUpdateTimeout() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PostUpdateTimeout")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockContainer_PostUpdateTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUpdateTimeout'
type MockContainer_PostUpdateTimeout_Call struct {
	*mock.Call
}

// PostUpdateTimeout is a helper method to define mock.On call
func (_e *MockContainer_Expecter) PostUpdateTimeout() *MockContainer_PostUpdateTimeout_Call {
	return &MockContainer_PostUpdateTimeout_Call{Call: _e.mock.On("PostUpdateTimeout")}
}

func (_c *MockContainer_PostUpdateTimeout_Call) Run(run func()) *MockContainer_PostUpdateTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_PostUpdateTimeout_Call) Return(_a0 int) *MockContainer_PostUpdateTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_PostUpdateTimeout_Call) RunAndReturn(run func() int) *MockContainer_PostUpdateTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// PreUpdateTimeout provides a mock function with no fields
func (_m *MockContainer) PreUpdateTimeout() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PreUpdateTimeout")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockContainer_PreUpdateTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreUpdateTimeout'
type MockContainer_PreUpdateTimeout_Call struct {
	*mock.Call
}

// PreUpdateTimeout is a helper method to define mock.On call
func (_e *MockContainer_Expecter) PreUpdateTimeout() *MockContainer_PreUpdateTimeout_Call {
	return &MockContainer_PreUpdateTimeout_Call{Call: _e.mock.On("PreUpdateTimeout")}
}

func (_c *MockContainer_PreUpdateTimeout_Call) Run(run func()) *MockContainer_PreUpdateTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_PreUpdateTimeout_Call) Return(_a0 int) *MockContainer_PreUpdateTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_PreUpdateTimeout_Call) RunAndReturn(run func() int) *MockContainer_PreUpdateTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// SafeImageID provides a mock function with no fields
func (_m *MockContainer) SafeImageID() types.ImageID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SafeImageID")
	}

	var r0 types.ImageID
	if rf, ok := ret.Get(0).(func() types.ImageID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.ImageID)
	}

	return r0
}

// MockContainer_SafeImageID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SafeImageID'
type MockContainer_SafeImageID_Call struct {
	*mock.Call
}

// SafeImageID is a helper method to define mock.On call
func (_e *MockContainer_Expecter) SafeImageID() *MockContainer_SafeImageID_Call {
	return &MockContainer_SafeImageID_Call{Call: _e.mock.On("SafeImageID")}
}

func (_c *MockContainer_SafeImageID_Call) Run(run func()) *MockContainer_SafeImageID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_SafeImageID_Call) Return(_a0 types.ImageID) *MockContainer_SafeImageID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_SafeImageID_Call) RunAndReturn(run func() types.ImageID) *MockContainer_SafeImageID_Call {
	_c.Call.Return(run)
	return _c
}

// Scope provides a mock function with no fields
func (_m *MockContainer) Scope() (string, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scope")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func() (string, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockContainer_Scope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scope'
type MockContainer_Scope_Call struct {
	*mock.Call
}

// Scope is a helper method to define mock.On call
func (_e *MockContainer_Expecter) Scope() *MockContainer_Scope_Call {
	return &MockContainer_Scope_Call{Call: _e.mock.On("Scope")}
}

func (_c *MockContainer_Scope_Call) Run(run func()) *MockContainer_Scope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_Scope_Call) Return(_a0 string, _a1 bool) *MockContainer_Scope_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContainer_Scope_Call) RunAndReturn(run func() (string, bool)) *MockContainer_Scope_Call {
	_c.Call.Return(run)
	return _c
}

// SetLinkedToRestarting provides a mock function with given fields: status
func (_m *MockContainer) SetLinkedToRestarting(status bool) {
	_m.Called(status)
}

// MockContainer_SetLinkedToRestarting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLinkedToRestarting'
type MockContainer_SetLinkedToRestarting_Call struct {
	*mock.Call
}

// SetLinkedToRestarting is a helper method to define mock.On call
//   - status bool
func (_e *MockContainer_Expecter) SetLinkedToRestarting(status interface{}) *MockContainer_SetLinkedToRestarting_Call {
	return &MockContainer_SetLinkedToRestarting_Call{Call: _e.mock.On("SetLinkedToRestarting", status)}
}

func (_c *MockContainer_SetLinkedToRestarting_Call) Run(run func(status bool)) *MockContainer_SetLinkedToRestarting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockContainer_SetLinkedToRestarting_Call) Return() *MockContainer_SetLinkedToRestarting_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContainer_SetLinkedToRestarting_Call) RunAndReturn(run func(bool)) *MockContainer_SetLinkedToRestarting_Call {
	_c.Run(run)
	return _c
}

// SetStale provides a mock function with given fields: status
func (_m *MockContainer) SetStale(status bool) {
	_m.Called(status)
}

// MockContainer_SetStale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStale'
type MockContainer_SetStale_Call struct {
	*mock.Call
}

// SetStale is a helper method to define mock.On call
//   - status bool
func (_e *MockContainer_Expecter) SetStale(status interface{}) *MockContainer_SetStale_Call {
	return &MockContainer_SetStale_Call{Call: _e.mock.On("SetStale", status)}
}

func (_c *MockContainer_SetStale_Call) Run(run func(status bool)) *MockContainer_SetStale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockContainer_SetStale_Call) Return() *MockContainer_SetStale_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContainer_SetStale_Call) RunAndReturn(run func(bool)) *MockContainer_SetStale_Call {
	_c.Run(run)
	return _c
}

// StopSignal provides a mock function with no fields
func (_m *MockContainer) StopSignal() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StopSignal")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContainer_StopSignal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopSignal'
type MockContainer_StopSignal_Call struct {
	*mock.Call
}

// StopSignal is a helper method to define mock.On call
func (_e *MockContainer_Expecter) StopSignal() *MockContainer_StopSignal_Call {
	return &MockContainer_StopSignal_Call{Call: _e.mock.On("StopSignal")}
}

func (_c *MockContainer_StopSignal_Call) Run(run func()) *MockContainer_StopSignal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_StopSignal_Call) Return(_a0 string) *MockContainer_StopSignal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_StopSignal_Call) RunAndReturn(run func() string) *MockContainer_StopSignal_Call {
	_c.Call.Return(run)
	return _c
}

// ToRestart provides a mock function with no fields
func (_m *MockContainer) ToRestart() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToRestart")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContainer_ToRestart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToRestart'
type MockContainer_ToRestart_Call struct {
	*mock.Call
}

// ToRestart is a helper method to define mock.On call
func (_e *MockContainer_Expecter) ToRestart() *MockContainer_ToRestart_Call {
	return &MockContainer_ToRestart_Call{Call: _e.mock.On("ToRestart")}
}

func (_c *MockContainer_ToRestart_Call) Run(run func()) *MockContainer_ToRestart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_ToRestart_Call) Return(_a0 bool) *MockContainer_ToRestart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_ToRestart_Call) RunAndReturn(run func() bool) *MockContainer_ToRestart_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyConfiguration provides a mock function with no fields
func (_m *MockContainer) VerifyConfiguration() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VerifyConfiguration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContainer_VerifyConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyConfiguration'
type MockContainer_VerifyConfiguration_Call struct {
	*mock.Call
}

// VerifyConfiguration is a helper method to define mock.On call
func (_e *MockContainer_Expecter) VerifyConfiguration() *MockContainer_VerifyConfiguration_Call {
	return &MockContainer_VerifyConfiguration_Call{Call: _e.mock.On("VerifyConfiguration")}
}

func (_c *MockContainer_VerifyConfiguration_Call) Run(run func()) *MockContainer_VerifyConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_VerifyConfiguration_Call) Return(_a0 error) *MockContainer_VerifyConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_VerifyConfiguration_Call) RunAndReturn(run func() error) *MockContainer_VerifyConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContainer creates a new instance of MockContainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContainer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContainer {
	mock := &MockContainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

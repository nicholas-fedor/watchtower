// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockFilterableContainer is an autogenerated mock type for the FilterableContainer type
type MockFilterableContainer struct {
	mock.Mock
}

type MockFilterableContainer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFilterableContainer) EXPECT() *MockFilterableContainer_Expecter {
	return &MockFilterableContainer_Expecter{mock: &_m.Mock}
}

// Enabled provides a mock function with no fields
func (_m *MockFilterableContainer) Enabled() (bool, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	var r1 bool
	if rf, ok := ret.Get(0).(func() (bool, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockFilterableContainer_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type MockFilterableContainer_Enabled_Call struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
func (_e *MockFilterableContainer_Expecter) Enabled() *MockFilterableContainer_Enabled_Call {
	return &MockFilterableContainer_Enabled_Call{Call: _e.mock.On("Enabled")}
}

func (_c *MockFilterableContainer_Enabled_Call) Run(run func()) *MockFilterableContainer_Enabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFilterableContainer_Enabled_Call) Return(_a0 bool, _a1 bool) *MockFilterableContainer_Enabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilterableContainer_Enabled_Call) RunAndReturn(run func() (bool, bool)) *MockFilterableContainer_Enabled_Call {
	_c.Call.Return(run)
	return _c
}

// ImageName provides a mock function with no fields
func (_m *MockFilterableContainer) ImageName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ImageName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFilterableContainer_ImageName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageName'
type MockFilterableContainer_ImageName_Call struct {
	*mock.Call
}

// ImageName is a helper method to define mock.On call
func (_e *MockFilterableContainer_Expecter) ImageName() *MockFilterableContainer_ImageName_Call {
	return &MockFilterableContainer_ImageName_Call{Call: _e.mock.On("ImageName")}
}

func (_c *MockFilterableContainer_ImageName_Call) Run(run func()) *MockFilterableContainer_ImageName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFilterableContainer_ImageName_Call) Return(_a0 string) *MockFilterableContainer_ImageName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilterableContainer_ImageName_Call) RunAndReturn(run func() string) *MockFilterableContainer_ImageName_Call {
	_c.Call.Return(run)
	return _c
}

// IsWatchtower provides a mock function with no fields
func (_m *MockFilterableContainer) IsWatchtower() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsWatchtower")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockFilterableContainer_IsWatchtower_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWatchtower'
type MockFilterableContainer_IsWatchtower_Call struct {
	*mock.Call
}

// IsWatchtower is a helper method to define mock.On call
func (_e *MockFilterableContainer_Expecter) IsWatchtower() *MockFilterableContainer_IsWatchtower_Call {
	return &MockFilterableContainer_IsWatchtower_Call{Call: _e.mock.On("IsWatchtower")}
}

func (_c *MockFilterableContainer_IsWatchtower_Call) Run(run func()) *MockFilterableContainer_IsWatchtower_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFilterableContainer_IsWatchtower_Call) Return(_a0 bool) *MockFilterableContainer_IsWatchtower_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilterableContainer_IsWatchtower_Call) RunAndReturn(run func() bool) *MockFilterableContainer_IsWatchtower_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockFilterableContainer) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFilterableContainer_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockFilterableContainer_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockFilterableContainer_Expecter) Name() *MockFilterableContainer_Name_Call {
	return &MockFilterableContainer_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockFilterableContainer_Name_Call) Run(run func()) *MockFilterableContainer_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFilterableContainer_Name_Call) Return(_a0 string) *MockFilterableContainer_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilterableContainer_Name_Call) RunAndReturn(run func() string) *MockFilterableContainer_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Scope provides a mock function with no fields
func (_m *MockFilterableContainer) Scope() (string, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scope")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func() (string, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockFilterableContainer_Scope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scope'
type MockFilterableContainer_Scope_Call struct {
	*mock.Call
}

// Scope is a helper method to define mock.On call
func (_e *MockFilterableContainer_Expecter) Scope() *MockFilterableContainer_Scope_Call {
	return &MockFilterableContainer_Scope_Call{Call: _e.mock.On("Scope")}
}

func (_c *MockFilterableContainer_Scope_Call) Run(run func()) *MockFilterableContainer_Scope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFilterableContainer_Scope_Call) Return(_a0 string, _a1 bool) *MockFilterableContainer_Scope_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilterableContainer_Scope_Call) RunAndReturn(run func() (string, bool)) *MockFilterableContainer_Scope_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFilterableContainer creates a new instance of MockFilterableContainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFilterableContainer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFilterableContainer {
	mock := &MockFilterableContainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

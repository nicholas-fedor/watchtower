// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	types "github.com/nicholas-fedor/watchtower/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// MockNotifier is an autogenerated mock type for the Notifier type
type MockNotifier struct {
	mock.Mock
}

type MockNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotifier) EXPECT() *MockNotifier_Expecter {
	return &MockNotifier_Expecter{mock: &_m.Mock}
}

// AddLogHook provides a mock function with no fields
func (_m *MockNotifier) AddLogHook() {
	_m.Called()
}

// MockNotifier_AddLogHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLogHook'
type MockNotifier_AddLogHook_Call struct {
	*mock.Call
}

// AddLogHook is a helper method to define mock.On call
func (_e *MockNotifier_Expecter) AddLogHook() *MockNotifier_AddLogHook_Call {
	return &MockNotifier_AddLogHook_Call{Call: _e.mock.On("AddLogHook")}
}

func (_c *MockNotifier_AddLogHook_Call) Run(run func()) *MockNotifier_AddLogHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNotifier_AddLogHook_Call) Return() *MockNotifier_AddLogHook_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNotifier_AddLogHook_Call) RunAndReturn(run func()) *MockNotifier_AddLogHook_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockNotifier) Close() {
	_m.Called()
}

// MockNotifier_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockNotifier_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockNotifier_Expecter) Close() *MockNotifier_Close_Call {
	return &MockNotifier_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockNotifier_Close_Call) Run(run func()) *MockNotifier_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNotifier_Close_Call) Return() *MockNotifier_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNotifier_Close_Call) RunAndReturn(run func()) *MockNotifier_Close_Call {
	_c.Run(run)
	return _c
}

// GetNames provides a mock function with no fields
func (_m *MockNotifier) GetNames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockNotifier_GetNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNames'
type MockNotifier_GetNames_Call struct {
	*mock.Call
}

// GetNames is a helper method to define mock.On call
func (_e *MockNotifier_Expecter) GetNames() *MockNotifier_GetNames_Call {
	return &MockNotifier_GetNames_Call{Call: _e.mock.On("GetNames")}
}

func (_c *MockNotifier_GetNames_Call) Run(run func()) *MockNotifier_GetNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNotifier_GetNames_Call) Return(_a0 []string) *MockNotifier_GetNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_GetNames_Call) RunAndReturn(run func() []string) *MockNotifier_GetNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetURLs provides a mock function with no fields
func (_m *MockNotifier) GetURLs() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetURLs")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockNotifier_GetURLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURLs'
type MockNotifier_GetURLs_Call struct {
	*mock.Call
}

// GetURLs is a helper method to define mock.On call
func (_e *MockNotifier_Expecter) GetURLs() *MockNotifier_GetURLs_Call {
	return &MockNotifier_GetURLs_Call{Call: _e.mock.On("GetURLs")}
}

func (_c *MockNotifier_GetURLs_Call) Run(run func()) *MockNotifier_GetURLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNotifier_GetURLs_Call) Return(_a0 []string) *MockNotifier_GetURLs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_GetURLs_Call) RunAndReturn(run func() []string) *MockNotifier_GetURLs_Call {
	_c.Call.Return(run)
	return _c
}

// SendNotification provides a mock function with given fields: reportType
func (_m *MockNotifier) SendNotification(reportType types.Report) {
	_m.Called(reportType)
}

// MockNotifier_SendNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNotification'
type MockNotifier_SendNotification_Call struct {
	*mock.Call
}

// SendNotification is a helper method to define mock.On call
//   - reportType types.Report
func (_e *MockNotifier_Expecter) SendNotification(reportType interface{}) *MockNotifier_SendNotification_Call {
	return &MockNotifier_SendNotification_Call{Call: _e.mock.On("SendNotification", reportType)}
}

func (_c *MockNotifier_SendNotification_Call) Run(run func(reportType types.Report)) *MockNotifier_SendNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Report))
	})
	return _c
}

func (_c *MockNotifier_SendNotification_Call) Return() *MockNotifier_SendNotification_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNotifier_SendNotification_Call) RunAndReturn(run func(types.Report)) *MockNotifier_SendNotification_Call {
	_c.Run(run)
	return _c
}

// StartNotification provides a mock function with no fields
func (_m *MockNotifier) StartNotification() {
	_m.Called()
}

// MockNotifier_StartNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartNotification'
type MockNotifier_StartNotification_Call struct {
	*mock.Call
}

// StartNotification is a helper method to define mock.On call
func (_e *MockNotifier_Expecter) StartNotification() *MockNotifier_StartNotification_Call {
	return &MockNotifier_StartNotification_Call{Call: _e.mock.On("StartNotification")}
}

func (_c *MockNotifier_StartNotification_Call) Run(run func()) *MockNotifier_StartNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNotifier_StartNotification_Call) Return() *MockNotifier_StartNotification_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNotifier_StartNotification_Call) RunAndReturn(run func()) *MockNotifier_StartNotification_Call {
	_c.Run(run)
	return _c
}

// NewMockNotifier creates a new instance of MockNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotifier {
	mock := &MockNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

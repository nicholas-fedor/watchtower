// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/spf13/cobra"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConvertibleNotifier creates a new instance of MockConvertibleNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConvertibleNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConvertibleNotifier {
	mock := &MockConvertibleNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConvertibleNotifier is an autogenerated mock type for the ConvertibleNotifier type
type MockConvertibleNotifier struct {
	mock.Mock
}

type MockConvertibleNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConvertibleNotifier) EXPECT() *MockConvertibleNotifier_Expecter {
	return &MockConvertibleNotifier_Expecter{mock: &_m.Mock}
}

// GetURL provides a mock function for the type MockConvertibleNotifier
func (_mock *MockConvertibleNotifier) GetURL(c *cobra.Command) (string, error) {
	ret := _mock.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*cobra.Command) (string, error)); ok {
		return returnFunc(c)
	}
	if returnFunc, ok := ret.Get(0).(func(*cobra.Command) string); ok {
		r0 = returnFunc(c)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*cobra.Command) error); ok {
		r1 = returnFunc(c)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConvertibleNotifier_GetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURL'
type MockConvertibleNotifier_GetURL_Call struct {
	*mock.Call
}

// GetURL is a helper method to define mock.On call
//   - c *cobra.Command
func (_e *MockConvertibleNotifier_Expecter) GetURL(c interface{}) *MockConvertibleNotifier_GetURL_Call {
	return &MockConvertibleNotifier_GetURL_Call{Call: _e.mock.On("GetURL", c)}
}

func (_c *MockConvertibleNotifier_GetURL_Call) Run(run func(c *cobra.Command)) *MockConvertibleNotifier_GetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *cobra.Command
		if args[0] != nil {
			arg0 = args[0].(*cobra.Command)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConvertibleNotifier_GetURL_Call) Return(s string, err error) *MockConvertibleNotifier_GetURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockConvertibleNotifier_GetURL_Call) RunAndReturn(run func(c *cobra.Command) (string, error)) *MockConvertibleNotifier_GetURL_Call {
	_c.Call.Return(run)
	return _c
}

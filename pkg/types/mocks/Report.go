// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	types "github.com/nicholas-fedor/watchtower/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// MockReport is an autogenerated mock type for the Report type
type MockReport struct {
	mock.Mock
}

type MockReport_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReport) EXPECT() *MockReport_Expecter {
	return &MockReport_Expecter{mock: &_m.Mock}
}

// All provides a mock function with no fields
func (_m *MockReport) All() []types.ContainerReport {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []types.ContainerReport
	if rf, ok := ret.Get(0).(func() []types.ContainerReport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ContainerReport)
		}
	}

	return r0
}

// MockReport_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockReport_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockReport_Expecter) All() *MockReport_All_Call {
	return &MockReport_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockReport_All_Call) Run(run func()) *MockReport_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReport_All_Call) Return(_a0 []types.ContainerReport) *MockReport_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReport_All_Call) RunAndReturn(run func() []types.ContainerReport) *MockReport_All_Call {
	_c.Call.Return(run)
	return _c
}

// Failed provides a mock function with no fields
func (_m *MockReport) Failed() []types.ContainerReport {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Failed")
	}

	var r0 []types.ContainerReport
	if rf, ok := ret.Get(0).(func() []types.ContainerReport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ContainerReport)
		}
	}

	return r0
}

// MockReport_Failed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Failed'
type MockReport_Failed_Call struct {
	*mock.Call
}

// Failed is a helper method to define mock.On call
func (_e *MockReport_Expecter) Failed() *MockReport_Failed_Call {
	return &MockReport_Failed_Call{Call: _e.mock.On("Failed")}
}

func (_c *MockReport_Failed_Call) Run(run func()) *MockReport_Failed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReport_Failed_Call) Return(_a0 []types.ContainerReport) *MockReport_Failed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReport_Failed_Call) RunAndReturn(run func() []types.ContainerReport) *MockReport_Failed_Call {
	_c.Call.Return(run)
	return _c
}

// Fresh provides a mock function with no fields
func (_m *MockReport) Fresh() []types.ContainerReport {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fresh")
	}

	var r0 []types.ContainerReport
	if rf, ok := ret.Get(0).(func() []types.ContainerReport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ContainerReport)
		}
	}

	return r0
}

// MockReport_Fresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fresh'
type MockReport_Fresh_Call struct {
	*mock.Call
}

// Fresh is a helper method to define mock.On call
func (_e *MockReport_Expecter) Fresh() *MockReport_Fresh_Call {
	return &MockReport_Fresh_Call{Call: _e.mock.On("Fresh")}
}

func (_c *MockReport_Fresh_Call) Run(run func()) *MockReport_Fresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReport_Fresh_Call) Return(_a0 []types.ContainerReport) *MockReport_Fresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReport_Fresh_Call) RunAndReturn(run func() []types.ContainerReport) *MockReport_Fresh_Call {
	_c.Call.Return(run)
	return _c
}

// Scanned provides a mock function with no fields
func (_m *MockReport) Scanned() []types.ContainerReport {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scanned")
	}

	var r0 []types.ContainerReport
	if rf, ok := ret.Get(0).(func() []types.ContainerReport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ContainerReport)
		}
	}

	return r0
}

// MockReport_Scanned_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scanned'
type MockReport_Scanned_Call struct {
	*mock.Call
}

// Scanned is a helper method to define mock.On call
func (_e *MockReport_Expecter) Scanned() *MockReport_Scanned_Call {
	return &MockReport_Scanned_Call{Call: _e.mock.On("Scanned")}
}

func (_c *MockReport_Scanned_Call) Run(run func()) *MockReport_Scanned_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReport_Scanned_Call) Return(_a0 []types.ContainerReport) *MockReport_Scanned_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReport_Scanned_Call) RunAndReturn(run func() []types.ContainerReport) *MockReport_Scanned_Call {
	_c.Call.Return(run)
	return _c
}

// Skipped provides a mock function with no fields
func (_m *MockReport) Skipped() []types.ContainerReport {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Skipped")
	}

	var r0 []types.ContainerReport
	if rf, ok := ret.Get(0).(func() []types.ContainerReport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ContainerReport)
		}
	}

	return r0
}

// MockReport_Skipped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Skipped'
type MockReport_Skipped_Call struct {
	*mock.Call
}

// Skipped is a helper method to define mock.On call
func (_e *MockReport_Expecter) Skipped() *MockReport_Skipped_Call {
	return &MockReport_Skipped_Call{Call: _e.mock.On("Skipped")}
}

func (_c *MockReport_Skipped_Call) Run(run func()) *MockReport_Skipped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReport_Skipped_Call) Return(_a0 []types.ContainerReport) *MockReport_Skipped_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReport_Skipped_Call) RunAndReturn(run func() []types.ContainerReport) *MockReport_Skipped_Call {
	_c.Call.Return(run)
	return _c
}

// Stale provides a mock function with no fields
func (_m *MockReport) Stale() []types.ContainerReport {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stale")
	}

	var r0 []types.ContainerReport
	if rf, ok := ret.Get(0).(func() []types.ContainerReport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ContainerReport)
		}
	}

	return r0
}

// MockReport_Stale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stale'
type MockReport_Stale_Call struct {
	*mock.Call
}

// Stale is a helper method to define mock.On call
func (_e *MockReport_Expecter) Stale() *MockReport_Stale_Call {
	return &MockReport_Stale_Call{Call: _e.mock.On("Stale")}
}

func (_c *MockReport_Stale_Call) Run(run func()) *MockReport_Stale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReport_Stale_Call) Return(_a0 []types.ContainerReport) *MockReport_Stale_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReport_Stale_Call) RunAndReturn(run func() []types.ContainerReport) *MockReport_Stale_Call {
	_c.Call.Return(run)
	return _c
}

// Updated provides a mock function with no fields
func (_m *MockReport) Updated() []types.ContainerReport {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Updated")
	}

	var r0 []types.ContainerReport
	if rf, ok := ret.Get(0).(func() []types.ContainerReport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ContainerReport)
		}
	}

	return r0
}

// MockReport_Updated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Updated'
type MockReport_Updated_Call struct {
	*mock.Call
}

// Updated is a helper method to define mock.On call
func (_e *MockReport_Expecter) Updated() *MockReport_Updated_Call {
	return &MockReport_Updated_Call{Call: _e.mock.On("Updated")}
}

func (_c *MockReport_Updated_Call) Run(run func()) *MockReport_Updated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReport_Updated_Call) Return(_a0 []types.ContainerReport) *MockReport_Updated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReport_Updated_Call) RunAndReturn(run func() []types.ContainerReport) *MockReport_Updated_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReport creates a new instance of MockReport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReport(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReport {
	mock := &MockReport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

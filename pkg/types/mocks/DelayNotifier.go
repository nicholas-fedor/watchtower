// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDelayNotifier creates a new instance of MockDelayNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDelayNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDelayNotifier {
	mock := &MockDelayNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDelayNotifier is an autogenerated mock type for the DelayNotifier type
type MockDelayNotifier struct {
	mock.Mock
}

type MockDelayNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDelayNotifier) EXPECT() *MockDelayNotifier_Expecter {
	return &MockDelayNotifier_Expecter{mock: &_m.Mock}
}

// GetDelay provides a mock function for the type MockDelayNotifier
func (_mock *MockDelayNotifier) GetDelay() time.Duration {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDelay")
	}

	var r0 time.Duration
	if returnFunc, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	return r0
}

// MockDelayNotifier_GetDelay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDelay'
type MockDelayNotifier_GetDelay_Call struct {
	*mock.Call
}

// GetDelay is a helper method to define mock.On call
func (_e *MockDelayNotifier_Expecter) GetDelay() *MockDelayNotifier_GetDelay_Call {
	return &MockDelayNotifier_GetDelay_Call{Call: _e.mock.On("GetDelay")}
}

func (_c *MockDelayNotifier_GetDelay_Call) Run(run func()) *MockDelayNotifier_GetDelay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDelayNotifier_GetDelay_Call) Return(duration time.Duration) *MockDelayNotifier_GetDelay_Call {
	_c.Call.Return(duration)
	return _c
}

func (_c *MockDelayNotifier_GetDelay_Call) RunAndReturn(run func() time.Duration) *MockDelayNotifier_GetDelay_Call {
	_c.Call.Return(run)
	return _c
}

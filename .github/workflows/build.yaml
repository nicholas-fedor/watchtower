name: Build

on:
  workflow_call:
    inputs:
      dry_run:
        description: "Dry run mode"
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      attestations: write
      id-token: write
    env:
      CGO_ENABLED: 0
      GO_VERSION: 1.24.x
      TAG: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@8e57b58e57be52ac95949151e2777ffda8501267
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Login to Docker Hub
        if: inputs.dry_run != true
        uses: docker/login-action@3d100841f68d4548bf57e52eb27bd33ec5069f55
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        if: inputs.dry_run != true
        uses: docker/login-action@3d100841f68d4548bf57e52eb27bd33ec5069f55
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@0931acf1f7634c2ee911eea11a334fb00a5180ab
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --config build/goreleaser/prod.yml ${{ inputs.dry_run && '--snapshot --clean --skip-publish' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: prod-binaries-sboms
          path: dist/*.sbom

      - name: Generate artifact attestation
        if: inputs.dry_run != true
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
        with:
          subject-checksums: ./dist/checksums.txt

      - name: Install jq
        if: inputs.dry_run != true
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Extract image tag
        if: inputs.dry_run != true
        id: extract-tag
        run: echo "image_tag=${TAG#v}" >> "$GITHUB_OUTPUT"

      - name: Get GHCR version manifest digest
        if: inputs.dry_run != true
        id: digest-version-ghcr
        run: |
          digest=$(docker manifest inspect "ghcr.io/${{ github.repository }}:${{ steps.extract-tag.outputs.image_tag }}" | jq -r '.Descriptor.digest')
          echo "digest=${digest}" >> "$GITHUB_OUTPUT"

      - name: Attest GHCR version manifest
        if: inputs.dry_run != true
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.digest-version-ghcr.outputs.digest }}
          push-to-registry: true

      - name: Get GHCR latest manifest digest
        if: inputs.dry_run != true
        id: digest-latest-ghcr
        run: |
          digest=$(docker manifest inspect "ghcr.io/${{ github.repository }}:latest" | jq -r '.Descriptor.digest')
          echo "digest=${digest}" >> "$GITHUB_OUTPUT"

      - name: Attest GHCR latest manifest
        if: inputs.dry_run != true
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.digest-latest-ghcr.outputs.digest }}
          push-to-registry: true

      - name: Get Docker Hub version manifest digest
        if: inputs.dry_run != true
        id: digest-version-docker
        run: |
          digest=$(docker manifest inspect "docker.io/nickfedor/watchtower:${{ steps.extract-tag.outputs.image_tag }}" | jq -r '.Descriptor.digest')
          echo "digest=${digest}" >> "$GITHUB_OUTPUT"

      - name: Attest Docker Hub version manifest
        if: inputs.dry_run != true
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
        with:
          subject-name: docker.io/nickfedor/watchtower
          subject-digest: ${{ steps.digest-version-docker.outputs.digest }}
          push-to-registry: true

      - name: Get Docker Hub latest manifest digest
        if: inputs.dry_run != true
        id: digest-latest-docker
        run: |
          digest=$(docker manifest inspect "docker.io/nickfedor/watchtower:latest" | jq -r '.Descriptor.digest')
          echo "digest=${digest}" >> "$GITHUB_OUTPUT"

      - name: Attest Docker Hub latest manifest
        if: inputs.dry_run != true
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
        with:
          subject-name: docker.io/nickfedor/watchtower
          subject-digest: ${{ steps.digest-latest-docker.outputs.digest }}
          push-to-registry: true

      - name: Generate SBOMs for Docker images
        if: inputs.dry_run != true
        run: |
          ARCHES=("amd64" "i386" "armhf" "arm64v8" "riscv64")
          REPOS=("docker.io/nickfedor/watchtower" "ghcr.io/nicholas-fedor/watchtower")
          VERSION="${{ steps.extract-tag.outputs.image_tag }}"
          for repo in "${REPOS[@]}"; do
            for arch in "${ARCHES[@]}"; do
              echo "Generating SBOM for $repo:$arch-$VERSION"
              anchore/sbom-action@v0 \
                image: $repo:$arch-$VERSION \
                format: spdx-json \
                output-file: dist/$arch-$VERSION.sbom.json
            done
            echo "Generating SBOM for $repo:$VERSION (manifest)"
            anchore/sbom-action@v0 \
              image: $repo:$VERSION \
              format: spdx-json \
              output-file: dist/manifest-$VERSION.sbom.json
            echo "Generating SBOM for $repo:latest (manifest)"
            anchore/sbom-action@v0 \
              image: $repo:latest \
              format: spdx-json \
              output-file: dist/manifest-latest.sbom.json
          done

      - name: Upload Docker image SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: prod-docker-sboms
          path: dist/*.sbom.json

      - name: Clean up dist directory
        if: always() # Runs even if previous steps fail
        run: rm -rf dist
